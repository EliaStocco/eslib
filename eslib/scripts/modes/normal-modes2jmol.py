#!/usr/bin/env python
import numpy as np

from eslib.classes.normal_modes import NormalModes
from eslib.formatting import esfmt, warning
from eslib.tools import convert

#---------------------------------------#
# Description of the script's purpose
description = "Normal Modes to Jmol"

#---------------------------------------#
def prepare_args(description):
    import argparse
    parser = argparse.ArgumentParser(description=description)
    argv = {"metavar" : "\b",}
    parser.add_argument("-i", "--input", type=str, **argv, help="normal modes file generated by 'iPI2NormalModes.py' (default: %(default)s)", default="normal-modes.pickle")
    parser.add_argument("-o", "--output"      , **argv, required=False, type=str  , help="output folder (default: %(default)s)", default='vib.jmol')
    return parser

#---------------------------------------#
@esfmt(prepare_args,description)
def main(args):

    #------------------#
    print("\tReading phonon modes from file '{:s}' ... ".format(args.input), end="")
    nm = NormalModes.from_pickle(args.input)
    print("done")

    eigvals = nm.get("eigval")
    modes = nm.get("mode").real
    if np.any(np.isnan(modes)):
        print("\t{:s}: Normal Modes are NaN. Let's try to compute them right now from eigvec.".format(warning))
        nm.eigvec2modes()
        modes = nm.get("mode").real
    atoms = nm.reference
    positions = atoms.get_positions()
    positions *= convert(1,"length","atomic_unit","angstrom")
    atoms.set_positions(positions)

    #---------------------------------------#
    # frequencies
    print("\tComputing frequencies ... ", end="")
    freqs = np.sqrt(eigvals) 
    freqs = convert(freqs,"frequency","atomic_unit","thz")
    print("done")

    #---------------------------------------#
    # write JMOL file
    print("\tWriting vibrational modes to file '{:s}' ... ".format(args.output), end="")
    np.set_printoptions(formatter={'float': '{: .8f}'.format})
    with open(args.output, 'w') as fdout:
        for b, vec in enumerate(modes.T):
            disp = vec.reshape(-1, 3)
            fdout.write("%i\n# %f THz, branch # %i\n"
                        % (len(atoms), freqs[b], b))
            for i, atom in enumerate(atoms.positions):
                fdout.write("%s  " % atoms[i].symbol
                            + ' '.join(map("{:10.8g}".format, atom)) + "  "
                            + ' '.join(map("{:12.8g}".format, disp[i])) + "\n")
    print("done")
   
#---------------------------------------#
if __name__ == "__main__":
    main()