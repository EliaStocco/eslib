#!/usr/bin/env python
import argparse
import pickle
import xarray as xr
from eslib.output import output_folder
from eslib.classes.normal_modes import NormalModes
from classes.atomic_structures import AtomicStructures
from eslib.units import remove_unit
from eslib.formatting import esfmt, warning

# import warnings
# warnings.filterwarnings("error")
#---------------------------------------#
# Description of the script's purpose
description = "Project a trajectory onto the normal modes."

#---------------------------------------#
def prepare_args(description):
    parser = argparse.ArgumentParser(description=description)
    argv = {"metavar":"\b"}
    # parser.add_argument("-g",  "--ground_state", type=str, **argv, help="ground-state atomic structure [a.u.] (default: %(default)s)", default="start.xyz")
    parser.add_argument("-t" ,  "--trajectory"   , type=str, **argv, help="input extxyz file [a.u.] (default: %(default)s)", default="trajectory.extxyz")
    parser.add_argument("-nm", "--normal_modes"  , type=str, **argv, help="normal modes file generated by 'iPI2NormalModes.py' (default: %(default)s)", default="normal-modes.pickle")
    parser.add_argument("-o" ,  "--output"       , type=str, **argv, help="output file (default: %(default)s)", default="projected.pickle")
    parser.add_argument("-of",  "--output_folder", type=str, **argv, help="output folder for csv files (default: %(default)s)", default=None)
    return parser

@esfmt(prepare_args,description)
def main(args):

    print("\tReading trajectory from file '{:s}' ... ".format(args.trajectory), end="")
    trajectory = AtomicStructures.from_file(file=args.trajectory)
    print("done")

    #---------------------------------------#
    print("\tReading phonon modes from file '{:s}' ... ".format(args.normal_modes), end="")
    with open(args.normal_modes,'rb') as f:
        nm = pickle.load(f)
    print("done")

    if type(nm) != NormalModes:
        raise TypeError("Loaded object is of wrong type, it should be a 'NormalModes' object")

    #---------------------------------------#
    # project on phonon modes
    print("\n\tProjecting the trajectory:")
    results = nm.project(trajectory,warning)
    print("done")
    
    #---------------------------------------#
    # save result to file
    print("\n\tWriting results to file '{:s}' in pickle format ... ".format(args.output), end="")
    # Open the file in binary write mode ('wb')
    with open(args.output, 'wb') as file:
        # Use pickle.dump() to serialize and save the object to the file
        pickle.dump(results, file)
    print("done")

    if args.output_folder is not None:
        print("\n\tWriting results to folder '{:s}' in separated csv files:".format(args.output_folder))
        output_folder(args.output_folder,show=False)
        for k in results.keys():
            arr = xr.DataArray(results[k])
            file = "{:s}/{:s}.csv".format(args.output_folder,k)
            print("\t\tsaving '{:s}' to file '{:s}' ... ".format(k,file), end="")
            arr = remove_unit(arr)[0]
            df = arr.T.to_pandas()
            df.to_csv(file,index=False,header=False,na_rep="nan",float_format="%24.16f")
            print("done")

        print("\n\tHow to read the csv files:")
        print("\t\tcolumns: normal mode index")
        print("\t\t   rows: time step")

if __name__ == "__main__":
    main()