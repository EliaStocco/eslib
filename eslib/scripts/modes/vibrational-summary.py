#!/usr/bin/env python
import numpy as np
import xarray as xr
import pandas as pd
import matplotlib.pyplot as plt
from eslib.formatting import esfmt
from eslib.classes.normal_modes import NormalModes
from eslib.tools import convert
from eslib.show import print_df

#---------------------------------------#
# Description of the script's purpose
description = "Show a summary of the information of the normal modes of a molecule."

#---------------------------------------#
def prepare_args(description):
    import argparse
    parser = argparse.ArgumentParser(description=description)
    argv = {"metavar":"\b"}
    parser.add_argument("-nm", "--normal_modes", type=str, required=True , **argv, help="normal modes file generated by 'ipi2normal-modes.py' (default: %(default)s)", default="normal-modes.pickle")
    parser.add_argument("-z" , "--bec"         , type=str, required=False, **argv, help="txt file with the BEC tensor of the reference configuration (default: %(default)s)", default=None)
    parser.add_argument("-p" , "--plot"        , type=str, required=False, **argv, help="plot with the harmonic IR spectrum (default: %(default)s)", default=None)
    parser.add_argument("-o" , "--output"      , type=str, required=False, **argv, help="output file with the summary as a dataframe (default: %(default)s)", default=None)
    return parser

#---------------------------------------#
def lorentzian(x, x0, y0, gamma):
    """
    Lorentzian function.
    
    Parameters:
    x : array-like
        The x-values where the function is evaluated.
    x0 : float
        The x-value at which the Lorentzian is centered.
    y0 : float
        The height of the Lorentzian peak.
    gamma : float
        The half-width at half-maximum (HWHM) of the Lorentzian peak.
        
    Returns:
    array-like
        The Lorentzian function evaluated at each x-value.
    """
    return y0 * gamma**2 / ((x - x0)**2 + gamma**2)

#---------------------------------------#
@esfmt(prepare_args,description)
def main(args):

    #---------------------------------------#
    print("\tReading phonon modes from file '{:s}' ... ".format(args.normal_modes), end="")
    nm = NormalModes.from_pickle(args.normal_modes)
    print("done")

    #---------------------------------------#
    # dataframe
    print("\tPreparing dataframe with the information ... ", end="")
    df = pd.DataFrame()
    eigvals = nm.eigval.to_numpy()
    df["index"] = np.arange(len(eigvals)).astype(int)
    df['index'] = df['index'].astype(int)
    df["w^2 [a.u.]"] = eigvals
    df["w [a.u.]"]  = [ np.sqrt(i) if i > 0 else None for i in eigvals ]
    df["w [THz]"]   = convert(df["w [a.u.]"],"frequency",_from="atomic_unit",_to="thz")
    df["w [cm^-1]"] = convert(df["w [a.u.]"],"frequency",_from="atomic_unit",_to="inversecm")
    df["T [a.u.]"]  = 2*np.pi / df["w [a.u.]"]
    df["T [ps]"]    = convert(df["T [a.u.]"],"time",_from="atomic_unit",_to="picosecond")
    df["T [fs]"]    = convert(df["T [a.u.]"],"time",_from="atomic_unit",_to="femtosecond")
    print("done")

    #---------------------------------------#
    print_df(df)

    #---------------------------------------#
    if args.plot is not None and args.bec is None:
        raise ValueError('Specify -z/--bec to produce the harmonic IR spectrum plot')
    
    #---------------------------------------#
    if args.bec is not None:
        bec = np.loadtxt(args.bec)[:nm.Nmodes,:]
        bec = xr.DataArray(bec, dims=('dof', 'dir'))
        zm = nm.Zmodes(bec)

        ir = pd.DataFrame()
        ir["Z*x"] = np.absolute(zm[:,0])
        ir["Z*y"] = np.absolute(zm[:,1])
        ir["Z*z"] = np.absolute(zm[:,2])
        ir["|Z*|"] = np.absolute(zm[:,3])

        df = pd.concat([df,ir],axis=1)

        ir["w [THz]"] = df["w [THz]"]
        ir["index"]   = df['index']
        ir = ir[ ['index',"w [THz]","Z*x","Z*y","Z*z","|Z*|"] ]
        print_df(ir)    

        if args.plot is not None:

            print("\n\tPreparing harmonic IR spectrum plot ... ", end="")

            # Define your x and y values
            x_values = df["w [cm^-1]"] # np.array([1, 3, 5])
            y_values = ir["|Z*|"] # np.array([2, 4, 3])

            # Define the fixed width (HWHM)
            gamma = 1

            # Generate a range of x-values for the spectrum
            x_plot = np.linspace(0, x_values.max()*1.1, 10000)

            # Initialize the spectrum to zero
            spectrum = np.zeros_like(x_plot)

            # Convolve each delta peak with the Lorentzian
            for x0, y0 in zip(x_values, y_values):
                if np.isnan(x0):
                    continue
                spectrum += lorentzian(x_plot, x0, y0, gamma)

            spectrum = np.asarray(spectrum)
            spectrum = spectrum / spectrum.max()

            # Create the plot
            plt.figure(figsize=(6, 4))
            plt.plot(x_plot, spectrum)
            plt.ylim(0,1.1)
            plt.xlim(min(x_plot),max(x_plot))
            plt.xlabel("Frequency [cm$^{-1}$]")
            plt.ylabel('Intensity [arb. unit]')
            plt.title('Harmonic IR spectrum')
            plt.grid()
            plt.tight_layout()
            print("done")

            print("\tSaving plot to file '{:s}' ... ".format(args.plot), end="")
            plt.savefig(args.plot)
            print("done")


    #---------------------------------------#
    if args.output is not None:
        print("\n\tWriting summary to file '{:s}' ... ".format(args.output), end="")
        df.to_csv(args.output,index=False)
        print("done")

if __name__ == "__main__":
    main()


# { 
#     // Use IntelliSense to learn about possible attributes.
#     // Hover to view descriptions of existing attributes.
#     // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
#     "version": "0.2.0",
#     "configurations": [
#         {
#             "name": "Python: Current File",
#             "type": "debugpy",
#             "request": "launch",
#             "program": "/home/stoccoel/google-personal/codes/eslib/eslib/scripts/modes/vibrational-summary.py",
#             "cwd" : "/home/stoccoel/google-personal/works/LiNbO3-primitive",
#             "console": "integratedTerminal",
#             //"args" : ["-p", "i-pi.positions_0.xyz", "-f", "i-pi.forces_0.xyz","-s","0.001"],
#             "args" : ["-nm","vibrations.pickle","-z","bec.txt"],
#             "justMyCode": false,
#         }
#     ]
# }