#!/usr/bin/env python
from eslib.classes.normal_modes import NormalModes
from eslib.tools import convert
from eslib.show import print_df
import numpy as np
import xarray as xr
import pandas as pd
from eslib.formatting import esfmt

#---------------------------------------#
# Description of the script's purpose
description = "Show a summary of the information of the normal modes of a molecule."

#---------------------------------------#
def prepare_args(description):
    import argparse
    parser = argparse.ArgumentParser(description=description)
    argv = {"metavar":"\b"}
    # parser.add_argument("-r" , "--reference"   , type=str  , **argv, help="ground-state atomic structure [a.u.] (default: %(default)s)", default=None)
    parser.add_argument("-nm", "--normal_modes", type=str, required=False, **argv, help="normal modes file generated by 'ipi2normal-modes.py' (default: %(default)s)", default="normal-modes.pickle")
    parser.add_argument("-z" , "--bec"         , type=str, required=False, **argv, help="txt file with the BEC tensor of the reference configuration (default: %(default)s)", default=None)
    parser.add_argument("-o" , "--output"      , type=str, required=False, **argv, help="output file with the summary as a dataframe (default: %(default)s)", default=None)
    return parser# .parse_args()

@esfmt(prepare_args,description)
def main(args):

    #---------------------------------------#
    print("\tReading phonon modes from file '{:s}' ... ".format(args.normal_modes), end="")
    nm = NormalModes.from_pickle(args.normal_modes)
    print("done")

    #---------------------------------------#
    # dataframe
    print("\tPreparing dataframe with the information ... ", end="")
    df = pd.DataFrame()
    eigvals = nm.eigval.to_numpy()
    df["index"] = np.arange(len(eigvals)).astype(int)
    df['index'] = df['index'].astype(int)
    df["w^2 [a.u.]"] = eigvals
    df["w [a.u.]"]  = [ np.sqrt(i) if i > 0 else None for i in eigvals ]
    df["w [THz]"]   = convert(df["w [a.u.]"],"frequency",_from="atomic_unit",_to="thz")
    df["w [cm^-1]"] = convert(df["w [a.u.]"],"frequency",_from="atomic_unit",_to="inversecm")
    df["T [a.u.]"]  = 2*np.pi / df["w [a.u.]"]
    df["T [ps]"]    = convert(df["T [a.u.]"],"time",_from="atomic_unit",_to="picosecond")
    df["T [fs]"]    = convert(df["T [a.u.]"],"time",_from="atomic_unit",_to="femtosecond")
    print("done")

    #---------------------------------------#
    print_df(df)

    #---------------------------------------#
    if args.bec is not None:
        bec = np.loadtxt(args.bec)[:nm.Nmodes,:]
        bec = xr.DataArray(bec, dims=('dof', 'dir'))
        zm = nm.Zmodes(bec)

        ir = pd.DataFrame()
        ir["Z*x"] = np.absolute(zm.loc[0,:])
        ir["Z*y"] = np.absolute(zm.loc[1,:])
        ir["Z*z"] = np.absolute(zm.loc[2,:])
        ir["|Z*|"] = np.absolute(zm.loc[3,:])

        df = pd.concat([df,ir],axis=1)

        ir["w [THz]"] = df["w [THz]"]
        ir["index"]   = df['index']
        ir = ir[ ['index',"w [THz]","Z*x","Z*y","Z*z","|Z*|"] ]
        print_df(ir)        

    #---------------------------------------#
    if args.output is not None:
        print("\n\tWriting summary to file '{:s}' ... ".format(args.output), end="")
        df.to_csv(args.output,index=False)
        print("done")

if __name__ == "__main__":
    main()


# { 
#     // Use IntelliSense to learn about possible attributes.
#     // Hover to view descriptions of existing attributes.
#     // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
#     "version": "0.2.0",
#     "configurations": [
#         {
#             "name": "Python: Current File",
#             "type": "debugpy",
#             "request": "launch",
#             "program": "/home/stoccoel/google-personal/codes/eslib/eslib/scripts/modes/vibrational-summary.py",
#             "cwd" : "/home/stoccoel/google-personal/works/LiNbO3-primitive",
#             "console": "integratedTerminal",
#             //"args" : ["-p", "i-pi.positions_0.xyz", "-f", "i-pi.forces_0.xyz","-s","0.001"],
#             "args" : ["-nm","vibrations.pickle","-z","bec.txt"],
#             "justMyCode": false,
#         }
#     ]
# }