#!/usr/bin/env python
import argparse
import pickle
from eslib.classes.normal_modes import NormalModes
from ase.io import read, write
from eslib.tools import convert
from eslib.input import flist
import pandas as pd
import numpy as np
import xarray as xr
from eslib.formatting import esfmt, error
from eslib.input import str2bool
from itertools import product
from eslib.classes.trajectory import AtomicStructures

#---------------------------------------#
# example of file for --displacements
# mode, start, end,  N
#    8,    -1,   1, 20
#   80,    -1,   1, 20

#---------------------------------------#
# Description of the script's purpose
description = "Displace an atomic structure along a normal mode with different amplitudes."

#---------------------------------------#
def prepare_args(description):
    parser = argparse.ArgumentParser(description=description)
    argv = {"metavar":"\b"}
    parser.add_argument("-i" , "--input"        , type=str     , required=False, **argv, help="file with the atomic structure to be displaced [a.u.] (default: None)", default=None)
    parser.add_argument("-if", "--input_format" , type=str     , required=False, **argv, help="format of the input file (default: None)" , default=None)
    parser.add_argument("-nm", "--normal_modes" , type=str     , required=True , **argv, help="normal modes file generated by 'ipi2normal-modes.py' (default: 'normal-modes.pickle')", default="normal-modes.pickle")
    parser.add_argument("-d" , "--displacements", type=str     , required=True , **argv, help="*.csv file with the displacements instructions")
    parser.add_argument("-r" , "--relative"     , type=str2bool, required=False, **argv, help="whether the displacements have to be considered relative to the characteristic length of the modes")
    parser.add_argument("-od" , "--out_dis"     , type=str     , required=False, **argv, help="*.txt output file with the displacements (default: None)", default=None)
    parser.add_argument("-o" , "--output"       , type=str     , required=False, **argv, help="output file [a.u.] (default: 'displaced-structures.extxyz')", default='displaced-structures.extxyz')
    parser.add_argument("-of", "--output_format", type=str     , required=False, **argv, help="ormat of the output file (default: None)", default=None)
    return parser

@esfmt(prepare_args,description)
def main(args):

    #---------------------------------------#
    print("\tReading phonon modes from file '{:s}' ... ".format(args.normal_modes), end="")
    nm = NormalModes.from_pickle(args.normal_modes)
    print("done")

    if args.relative:
        scales = nm.get_characteristic_scales()
    
    #---------------------------------------#
    # read reference atomic structure
    reference = None
    if args.input is not None:
        print("\tReading atomic structure from input '{:s}' ... ".format(args.input), end="")
        reference = read(args.input,format=args.input_format,index=0)
        print("done")

        nm.set_reference(reference)

    if nm.reference is None:
        print("\n\t{:s}: no reference structure provided.\nSpecify it with -i,--input.".format(error))
        return
    
    #---------------------------------------#
    print("\tReading the displacements instructions from file '{:s}' ... ".format(args.displacements), end="")
    instructions = pd.read_csv(args.displacements)
    print("done")

    #---------------------------------------#
    print("\tPreparing displacement along single modes:")
    lists = [None]*len(instructions)
    for n,row in instructions.iterrows():
        print("\t\tmode {:3d}: ".format(int(row['mode'])),end="")
        lists[n]= np.linspace(row['start'],row['end'],int(row['N']+1),endpoint=True)
        print(lists[n])

    displacements = np.asarray(list(product(*lists)))
    if args.out_dis is not None:
        print("\n\tWriting displacements to file '{:s}' ... ".format(args.out_dis), end="")
        np.savetxt(args.out_dis,displacements,fmt='%10.4f')
        print("done")   

    #---------------------------------------#
    print("\n\tComputing the displaced atomic structures ... ",end="")
    atoms = [None]*len(displacements)
    for n,d in enumerate(displacements):
        disp = xr.DataArray(np.zeros(nm.Nmodes), dims=("mode"))
        for m in range(displacements.shape[1]):
            mode = int(instructions.at[m,"mode"])
            disp.loc[mode] = d[m]
            if args.relative:
                disp.loc[mode] *= scales.at[mode,"length"]
        atoms[n] = nm.nmd2cp(disp)
        # with suppress_output():
    print("done")    

    #---------------------------------------#
    try : 
        print("\n\tComputing the harmonic potential energy ... ",end="")
        atoms = AtomicStructures(atoms)
        potential_energy = nm.potential_energy(atoms)
        atoms.set_info("harmonic-potential-energy",potential_energy)
        atoms.set_info("displacements",displacements)
        print("done")   
    except:
        print("\n\tAn error occurred.")

    #---------------------------------------#
    # Write the data to the specified output file with the specified format
    print("\n\tWriting data to file '{:s}' ... ".format(args.output), end="")
    atoms.to_file(file=args.output,format=args.output_format)
    print("done")   
    # try:
    #     write(images=atoms,filename=args.output,format=args.output_format) # fmt)
    #     print("done")
    # except Exception as e:
    #     print("\n\tError: {:s}".format(e))

if __name__ == "__main__":
    main()


# { 
#     // Use IntelliSense to learn about possible attributes.
#     // Hover to view descriptions of existing attributes.
#     // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
#     "version": "0.2.0",
#     "configurations": [
#         {
#             "name": "Python: Current File",
#             "type": "debugpy",
#             "request": "launch",
#             "program": "/home/stoccoel/google-personal/codes/eslib/eslib/scripts/modes/displace-along-normal-modes.py",
#             "cwd" : "/home/stoccoel/google-personal/works/LiNbO3/displacements",
#             "console": "integratedTerminal",
#             "args" : ["-i", "start.au.extxyz", "-nm", "normal-modes.pickle", "-d", "displacements.csv","-od","out-dis.txt"],
#             "justMyCode": false,
#         }
#     ]
# }